#include <stdio.h>
#include <stdlib.h>
#define ERROR -1
#define minData -1
#define N 5
/*堆的定义*/
typedef int ElementType;
struct HNode{
    ElementType *data;//存储元素的数组
    int size;//堆中元素的个数
    int capacity;//堆的最大容量

};
typedef struct HNode *minHeap;

void readFromFile(minHeap H);
minHeap creatHeap();/*创建一个容量为N的空的最小堆*/
void biuldMinHeap(minHeap H);
void sortMin(minHeap H,int i);
ElementType deleteMin(minHeap H);
int IsEmpty(minHeap H);
int main()
{
    int x,i;
    minHeap H;//创建最小堆
    H=creatHeap();
    readFromFile(H);
    biuldMinHeap(H);//创建最小堆
    for(i=1;i<=N;i++){
        x=deleteMin(H);
        printf("%d\n",x);
    }
    return 0;
}

void readFromFile(minHeap H){
    int i;
    FILE *fp;
     if((fp=fopen("E://数据结构//Huffman//data.txt","r"))==NULL)
    {
        printf("fail to open!");
        exit(0);
    }
    for(i=1;i<=N;i++){
        fscanf(fp,"%d\n",&H->data[i]);
        //printf("%lf",data);打印出来是0，说明读不进去
    }
    H->size=N;
}

/*创建一个容量为N的空的最小堆*/
minHeap creatHeap(){
    minHeap H=(minHeap)malloc(sizeof(struct HNode));
    H->data=(ElementType*)malloc((N+1)*sizeof(ElementType));
    H->size=0;//当前的元素个数为0
    H->capacity=N;//最大的容量
    H->data[0]=minData;//建立一个哨兵,小于堆中所有的元素
    return H;
}

void biuldMinHeap(minHeap H){
    /*假设所有的H->capacity个元素都存在了H->data[]中*/
    int i;
    //从最后一个结点的父节点开始，一直到根节点1
    for(i=H->size/2;i>0;i--)
        sortMin(H,i);
}

/*将H中以H->data[i]为根的子堆调整为最小堆*/
void sortMin(minHeap H,int i){
    int parent,child;
    ElementType x;

    x=H->data[i];//取出该点的值
    for(parent=i;parent*2<=H->size;parent=child){
        child=parent*2;//找到其中左儿子的位置
        //指向两个儿子中较小的一个,并且如果没有右儿子，则不进行比较了
        if(child!=H->size &&(H->data[child]>H->data[child+1]))
            child++;
        //已经可以进行比较parent和child
        if(x<H->data[child]) break;
        else H->data[parent]=H->data[child];
    }
    H->data[parent]=x;
    /*其实就是最后跟parent交换的儿子child,前边的child把值给了data[i]，child空出了一个位置，
    并不着急马上 H->data[child]=H->data[parent]，因为现在只是要确定H->data[i]这个元素到底应该放在哪个位置上，
    只要用前面已经取出的x去比较就好了*/
}

//取出栈顶元素，就是最小的元素，并且删除一个结点
ElementType deleteMin(minHeap H){
    int parent,child;
    ElementType minItem,x;
    if(IsEmpty(H)){
        printf("最小堆是空的!\n");
        return ERROR;
    }

    //正常操作
    minItem=H->data[1];//取出最小值，就是根
    //要保证剩下的堆还是树
    x=H->data[H->size--];//元素减少，再取出最下层的元素
    //重新排列顺序,为x（最后一个元素）找到合适的位置
    for(parent=1;parent*2<=H->size;parent=child){
        child=parent*2;
        if(child!=H->size &&(H->data[child]>H->data[child+1]))
            child++;
        if(x<H->data[child]) break;
        else H->data[parent]=H->data[child];
    }
    H->data[parent]=x;
    return minItem;
}

/*判断最小堆是不是空的*/
int IsEmpty(minHeap H){
    /*if(H->size==0)
        return 1;
    else
        return 0;*/
    //更简单
    return (H->size==0);
}
